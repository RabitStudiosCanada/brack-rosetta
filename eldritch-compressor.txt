// give LLM a seed phrase or question - get answers from the void (patterns in decompression noise translated to speech)

[compression_oracle] {
    <compression_stages> = [
        text → utf8_bytes → compressed_data → decompressed_bytes → reconstructed_text
    ]
    
    (compress_seed) <sentence> → {
        utf8_encoded = encode_utf8(sentence);
        compressed = lz77_compress(utf8_encoded);
        return {original: sentence, encoded: utf8_encoded, compressed: compressed}
    }
    
    (decompress_with_noise_capture) <compressed_data> → {
        decompressed = lz77_decompress(compressed_data);
        reconstructed = decode_utf8(decompressed);
        noise_vector = calculate_diff(original_utf8, decompressed);
        return {reconstructed: reconstructed, noise: noise_vector}
    }
    
    (analyze_noise_patterns) <noise_vector> → {
        entropy = calculate_entropy(noise_vector);
        periodicity = find_periodic_patterns(noise_vector);
        clustering = cluster_noise_values(noise_vector);
        
        || entropy > 0.7 && periodicity.found → pattern_detected ||
        || clustering.groups > 1 → structure_detected ||
        || else → random_noise
        
        return {entropy: entropy, patterns: periodicity, clusters: clustering}
    }
    
    (decode_noise_as_speech) <noise_vector> → {
        speech_candidates = map_noise_to_phonemes(noise_vector);
        unicode_mapping = phonemes_to_unicode(speech_candidates);
        language_detection = detect_language(unicode_mapping);
        
        || language_detection.confidence > 0.6 → valid_language ||
        || else → unknown_pattern
        
        return {phonemes: speech_candidates, unicode: unicode_mapping, language: language_detection}
    }
    
    (oracle_process) <sentence> → {
        compressed_result = compress_seed(sentence);
        decompressed_result = decompress_with_noise_capture(compressed_result.compressed);
        noise_analysis = analyze_noise_patterns(decompressed_result.noise);
        
        || noise_analysis.entropy > 0.7 → {
            decoded_speech = decode_noise_as_speech(decompressed_result.noise);
            return {original: sentence, noise_message: decoded_speech, status: "oracle_active"}
        } ||
        || else → {
            return {original: sentence, noise_message: null, status: "no_patterns"}
        }
    }
}
