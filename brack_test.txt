{
  // --- Variable Declarations ---
  (let [numbers [1 2 3 4 5]])
  (let [sum 0])

  // --- Function Definition: Sum a List ---
  (define [sum_list]
    <lambda>
    {
      (let [acc 0])
      (for [n (arg 0)]
        {
          (set [acc (add [acc n])])
        }
      )
      (return [acc])
    }
  )

  // --- Function Call and Assignment ---
  (set [sum (sum_list [numbers])])

  // --- Print the Result ---
  (print [Sum is: sum])

  // --- Show If/Else Branching ---
  (if (gt [sum 10])
      { (print [Sum is greater than 10]) }
      { (print [Sum is less than or equal to 10]) }
  )

  // --- Loop and Print Each Element with Meta Symbolic Logic ---
  (for [n [numbers]]
    {
      (print [Element: n])
      (print [Type is: <type-of n>])
    }
  )

  // --- Higher-Order Function Example (Apply) ---
  (define [square]
    <lambda>
    { (return [(mul [(arg 0) (arg 0)])]) }
  )

  (define [map]
    <lambda>
    {
      (let [result []])
      (for [item (arg 1)]
        {
          (push [result ((arg 0) [item])])
        }
      )
      (return [result])
    }
  )

  (let [squares (map [square numbers])])
  (print [Squares: squares])

  // --- Symbolic Meta Example ---
  (print [MetaType of sum: <type-of sum>])
}
